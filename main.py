from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler
import logging
import config  # –§–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞
import openpyxl
from openpyxl.styles import PatternFill
import os
import shutil  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
import asyncio

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
excel_file_path = './guest_list.xlsx'

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (User ID)
authorized_usernames = ["@Alexander_Dym", "@yana_nebo", "@kasper94", "@AliNadya", "@kastorkin"]

# –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
participants = {
    "token_kostiantyn": "Kostiantyn Dotsenko",
    "token_mariia": "Mariia",
    "token_joanna": "Joanna Marinova",
    "token_daiana_b": "Daiana",
    "token_daiana_imlive": "Daiana Imlive",
    "token_artem": "Artem",
    "token_anastasiia": "Anastasiia",
    "token_olga": "Olga",
    "token_sebastien": "Sebastien BALESTAS",
    "token_nikita": "Nikita",
    "token_anton": "Anton",
    "token_sasha": "Sasha",
    "token_shawn": "Shawn Herron",
    "token_cybermike": "cybermike",
    "token_vitaliy": "Vitaliy",
    "token_nikolay": "–ù–∏–∫–æ–ª–∞–π",
    "token_vladyslav": "Vladyslav Haiduk",
    "token_slava": "Slava",
    "token_roman": "Roman",
    "token_tomas": "Tom√°≈° V√≠tek",
    "token_pavel": "Pavel",
    "token_kira": "Kira",
    "token_snezhana": "Snezhana Fed",
    "token_maksym": "Maksym",
    "token_igor": "Igor Aleksandrov",
    "token_andrii": "Andrii Cherepanskyi",
    "token_nazar": "Nazar",
    "token_sebastian": "Sebastian Prekop",
    "token_tobias_andersen": "Tobias Andersen",
    "token_daria": "Daria",
    "token_kian": "Kian Mir",
    "token_alessandro": "Alessandro Polidoro",
    "token_tobias_endorphina": "Tobias Andersen",
    "token_andrii_stat": "Andrii",
    "token_inna": "Inna",
    "token_muhammad": "Muhammad Ulil Nuha",
    "token_pentil": "Pentil_dawa",
    "token_sergey": "Sergey",
    "token_ilya": "Ilya",
    "token_alexander": "Alexander",
    "token_arthur": "Arthur"
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
checked_in = set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ username
def is_authorized(username):
    return username in authorized_usernames

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ Excel –∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º
def mark_guest_in_excel(participant_name):
    wb = openpyxl.load_workbook(excel_file_path)
    sheet = wb.active

    fill = PatternFill(start_color="00FF00", end_color="00FF00", fill_type="solid")

    for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row, max_col=sheet.max_column):
        if row[0].value == participant_name:
            for cell in row:
                cell.fill = fill
            break

    wb.save(excel_file_path)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∑–µ–ª—ë–Ω–æ–π –∑–∞–ª–∏–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ Excel
def reset_excel_fill():
    wb = openpyxl.load_workbook(excel_file_path)
    sheet = wb.active

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –∏ —É–±–∏—Ä–∞–µ–º –∑–∞–ª–∏–≤–∫—É
    for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row, max_col=sheet.max_column):
        for cell in row:
            cell.fill = PatternFill(fill_type=None)  # –£–±–∏—Ä–∞–µ–º –∑–∞–ª–∏–≤–∫—É

    wb.save(excel_file_path)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ Excel —Ñ–∞–π–ª–∞
def create_backup():
    backup_file_path = excel_file_path.replace(".xlsx", "_backup.xlsx")
    shutil.copyfile(excel_file_path, backup_file_path)
    return backup_file_path

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context):
    user = update.message.from_user
    username = f"@{user.username}"

    if not is_authorized(username):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    if context.args:
        parameter = context.args[0]
        logging.info(f"Received parameter: {parameter}")

        if parameter in participants:
            participant_name = participants[parameter]
            if participant_name not in checked_in:
                checked_in.add(participant_name)
                mark_guest_in_excel(participant_name)
                await update.message.reply_text(
                    f"‚úÖ üéâ *{participant_name}* –ø—Ä–∏—à–µ–ª –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ! ü•≥",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    f"üö´ *{participant_name}* —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. üö´",
                    parse_mode='Markdown'
                )
        else:
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –±–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ùå")
    else:
        await menu(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
async def reset(update: Update, context):
    user = update.message.from_user
    username = f"@{user.username}"

    if not is_authorized(username):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
    keyboard = [[InlineKeyboardButton("–û–ö ‚úÖ", callback_data='confirm_reset')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã, –∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞.",
        reply_markup=reply_markup
    )

## –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞
async def confirm_reset(query, context):
    user = query.from_user
    username = f"@{user.username}"

    if not is_authorized(username):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞
    backup_file_path = create_backup()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.message.reply_document(open(backup_file_path, 'rb'), caption="–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è")

    # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    checked_in.clear()
    reset_excel_fill()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–µ–ª—ë–Ω—É—é –∑–∞–ª–∏–≤–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
    await query.message.delete()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ
    await query.message.reply_text("üîÑ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã.")
    
# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def menu(update: Update, context):
    user = update.message.from_user
    username = f"@{user.username}"

    if not is_authorized(username):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    keyboard = [
        [InlineKeyboardButton("Guest List", callback_data='guest_list')]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "Guest List"
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context):
    query = update.callback_query
    data = query.data

    if data == 'confirm_reset':
        await confirm_reset(query, context)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ "–û–ö"
    elif data == 'guest_list':
        await send_excel(query, context)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª Excel –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ "Guest List"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ Excel
async def send_excel(update: Update, context):
    user = update.message.from_user
    username = f"@{user.username}"

    if not is_authorized(username):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    try:
        await update.message.reply_document(open(excel_file_path, 'rb'))
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /guest_list
async def guest_list(update: Update, context):
    user = update.message.from_user
    username = f"@{user.username}"

    if not is_authorized(username):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    await send_excel(update, context)

def main():
    application = Application.builder().token(config.tg_bot_token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("reset", reset))  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("guest_list", guest_list))  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ Excel —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
    application.add_handler(CallbackQueryHandler(button))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫

    application.run_polling()

if __name__ == '__main__':
    main()